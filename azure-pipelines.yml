pool:
  vmImage: 'ubuntu-latest'

parameters:
- name: targetType
  displayName: 'Target Type'
  type: string
  default: 'os'
  values:
  - os
  - webserver

variables:
  TAG: '0.0.2' # Initialize TAG variable
  TARGET_DIR_OS: 'inspectra-os'
  TARGET_DIR_WEBSERVER: 'inspectra-webserver'

steps:
- script: |
    echo 'Determining Docker image tag...'
    if [ -z "$(TAG)" ]; then
      if [ "$(Build.SourceTag)" != "" ]; then
        TAG=$(Build.SourceTag)
      else
        TAG=$(Build.SourceBranchName)-$(Build.SourceVersion)
      fi
      echo "##vso[task.setvariable variable=TAG]$TAG"
      echo "Docker image tag set to: $TAG"
    else
      echo "TAG is already initialized with value: $TAG"
    fi
  displayName: 'Set Docker image tag'

# Build inspectra-os Docker image only if os target type is selected
- task: Docker@2
  displayName: 'Build inspectra-os Docker Image'
  condition: eq('${{parameters.targetType}}', 'os')
  inputs:
    command: 'build'
    dockerfile: '$(System.DefaultWorkingDirectory)/$(TARGET_DIR_OS)/Dockerfile'
    repository: 'inspectra-os'
    tags: '$(TAG)'
    buildContext: '$(System.DefaultWorkingDirectory)/$(TARGET_DIR_OS)'

# Build inspectra-webserver Docker image only if webserver target type is selected
- task: Docker@2
  displayName: 'Build inspectra-webserver Docker Image'
  condition: eq('${{parameters.targetType}}', 'webserver')
  inputs:
    command: 'build'
    dockerfile: '$(System.DefaultWorkingDirectory)/$(TARGET_DIR_WEBSERVER)/Dockerfile'
    repository: 'inspectra-webserver'
    tags: '$(TAG)'
    buildContext: '$(System.DefaultWorkingDirectory)/$(TARGET_DIR_WEBSERVER)'

- bash: |
    echo 'Creating reports directory for generated files'
    mkdir -p $(System.DefaultWorkingDirectory)/reports
    chmod 777 $(System.DefaultWorkingDirectory)/reports
    ls -la $(System.DefaultWorkingDirectory)/reports

    echo "Running run_all_profiles for ${{parameters.targetType}}"
    
    if [[ "${{parameters.targetType}}" == "os" ]]; then
      # Run as root user for os target
      docker run --rm -v $(System.DefaultWorkingDirectory)/$(TARGET_DIR_OS):/app -v $(System.DefaultWorkingDirectory)/reports:/app/reports inspectra-os:$(TAG) bash -c "
        # Switch back to root if needed for permissions
        if id inspectra_os &>/dev/null; then
          su - root
        fi
        
        # Fix potential PATH issues for InSpec
        export GEM_HOME=/var/lib/gems/$(ruby -e 'puts RUBY_VERSION.split(\".\")[0..1].join(\".\")')
        export PATH=\$GEM_HOME/bin:\$PATH
        
        # Fix permissions for script
        chmod +x /app/run_all_profiles.sh
        
        # Debug InSpec installation
        echo 'Checking InSpec installation:'
        which inspec || echo 'InSpec command not found in PATH'
        find / -name inspec -type f 2>/dev/null
        echo 'Current PATH:'
        echo \$PATH
        
        # Run with explicit path to inspec if necessary
        INSPEC_PATH=\$(find / -name inspec -type f 2>/dev/null | head -n 1)
        if [ ! -z \"\$INSPEC_PATH\" ]; then
          echo \"Using InSpec at \$INSPEC_PATH\"
          sed -i \"s|inspec|$INSPEC_PATH|g\" /app/run_all_profiles.sh
        fi
        
        # Run the profile
        cd /app && bash /app/run_all_profiles.sh
      "
    elif [[ "${{parameters.targetType}}" == "webserver" ]]; then
      # Run as root user for webserver target (even though Dockerfile specifies inspectra_webserver user)
      docker run --rm --user root \
        -v $(System.DefaultWorkingDirectory)/controls:/app/controls \
        -v $(System.DefaultWorkingDirectory)/reports:/app/reports \
        -v $(System.DefaultWorkingDirectory)/test:/app/test \
        -v $(System.DefaultWorkingDirectory)/$(TARGET_DIR_WEBSERVER)/src:/app/src \
        inspectra-webserver:$(TAG) bash -c "
        # Fix potential PATH issues for InSpec
        export GEM_HOME=/var/lib/gems/$(ruby -e 'puts RUBY_VERSION.split(\".\")[0..1].join(\".\")')
        export PATH=\$GEM_HOME/bin:\$PATH
        
        # Fix permissions for script and directories
        chmod +x /usr/local/bin/run_all_profiles.sh
        chmod -R 777 /app/reports /app/controls /app/test
        
        # Debug InSpec installation
        echo 'Checking InSpec installation:'
        which inspec || echo 'InSpec command not found in PATH'
        find / -name inspec -type f 2>/dev/null
        echo 'Current PATH:'
        echo \$PATH
        
        # Run with explicit path to inspec if necessary
        INSPEC_PATH=\$(find / -name inspec -type f 2>/dev/null | head -n 1)
        if [ ! -z \"\$INSPEC_PATH\" ]; then
          echo \"Using InSpec at \$INSPEC_PATH\"
          sed -i \"s|inspec|$INSPEC_PATH|g\" /usr/local/bin/run_all_profiles.sh
        fi
        
        # Run the profile
        CHEF_LICENSE=accept INSPEC_LICENSE=accept /usr/local/bin/run_all_profiles.sh
      "
    else
      echo "Unknown target type: ${{parameters.targetType}}"
      exit 1
    fi
  displayName: 'Run run_all_profiles based on selected target type'

- task: PublishPipelineArtifact@1
  displayName: 'Publish generated InSpec reports'
  inputs:
    targetPath: $(System.DefaultWorkingDirectory)/reports
    artifact: 'Inspectra-Reports-${{parameters.targetType}}'
